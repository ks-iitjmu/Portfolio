<div id="leetcode-stats" class="flex flex-col gap-4">
  <div class="text-gray-400 text-sm">Loading...</div>
</div>

<script>
  const LEETCODE_USERNAME = "kunalsharma02";

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty.toLowerCase()) {
      case "easy":
        return {
          color: "text-green-400",
          bg: "bg-green-400/10",
          ring: "ring-green-400/30",
        };
      case "medium":
        return {
          color: "text-yellow-400",
          bg: "bg-yellow-400/10",
          ring: "ring-yellow-400/30",
        };
      case "hard":
        return {
          color: "text-red-400",
          bg: "bg-red-400/10",
          ring: "ring-red-400/30",
        };
      default:
        return {
          color: "text-gray-400",
          bg: "bg-gray-400/10",
          ring: "ring-gray-400/30",
        };
    }
  };

  async function fetchLeetCodeData() {
    try {
      const apis = [
        `https://leetcode-api-faisalshohag.vercel.app/${LEETCODE_USERNAME}`,
        `https://alfa-leetcode-api.onrender.com/userProfile/${LEETCODE_USERNAME}`,
        `https://leetcode-stats-api.herokuapp.com/${LEETCODE_USERNAME}`,
      ];

      for (const apiUrl of apis) {
        try {
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 5000);

          const response = await fetch(apiUrl, {
            signal: controller.signal,
            headers: {
              Accept: "application/json",
              "Cache-Control": "max-age=300",
            },
          });

          clearTimeout(timeoutId);

          if (response.ok) {
            const data = await response.json();
            if (
              data &&
              (data.totalSolved ||
                data.solvedProblem ||
                data.status === "success")
            ) {
              return normalizeData(data);
            }
          }
        } catch (apiError) {
          console.warn(`API ${apiUrl} failed:`, apiError);
          continue;
        }
      }

      throw new Error("All APIs failed");
    } catch (error) {
      console.error("Error fetching LeetCode data:", error);
      return null;
    }
  }

  function normalizeData(rawData) {
    if (rawData.totalSolved !== undefined) {
      return rawData;
    } else if (rawData.solvedProblem !== undefined) {
      return {
        totalSolved: rawData.solvedProblem || 0,
        totalQuestions: rawData.totalQuestions || 3200,
        easySolved: rawData.easySolved || 0,
        totalEasy: rawData.totalEasy || 826,
        mediumSolved: rawData.mediumSolved || 0,
        totalMedium: rawData.totalMedium || 1735,
        hardSolved: rawData.hardSolved || 0,
        totalHard: rawData.totalHard || 639,
        acceptanceRate: rawData.acceptanceRate || 0,
        ranking: rawData.ranking || null,
      };
    }
    return rawData;
  }
  async function displayLeetCodeStats() {
    const statsContainer = document.getElementById("leetcode-stats");
    if (!statsContainer) return;

    statsContainer.innerHTML =
      '<div class="text-gray-400 text-sm">Fetching data...</div>';

    try {
      const data = await fetchLeetCodeData();

      if (!data) {
        statsContainer.innerHTML = `
          <div class="text-red-400 text-sm">
            ‚ö†Ô∏è LeetCode API is not working
          </div>
        `;
        return;
      }

      const totalSolved = data.totalSolved || 0;
      const totalQuestions = data.totalQuestions || 3000;
      const solvedPercentage = Math.round((totalSolved / totalQuestions) * 100);

      statsContainer.innerHTML = `
        <div class="space-y-3">
          <div class="flex items-center gap-4 flex-wrap">
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded-full bg-orange-500/10 ring-1 ring-orange-400/30"></div>
              <span class="text-white font-semibold">Total Solved:</span>
              <span class="text-orange-400 font-bold text-lg">${totalSolved}</span>
              <span class="text-xs text-orange-400 opacity-75">(${solvedPercentage}% of ${totalQuestions})</span>
            </div>
          </div>
          
          <div class="flex items-center gap-6 flex-wrap text-sm">
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded-full ${getDifficultyColor("easy").bg} ${getDifficultyColor("easy").ring} ring-1"></div>
              <span class="text-gray-400">Easy:</span>
              <span class="${getDifficultyColor("easy").color} font-semibold">${data.easySolved || 0}</span>
            </div>
            
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded-full ${getDifficultyColor("medium").bg} ${getDifficultyColor("medium").ring} ring-1"></div>
              <span class="text-gray-400">Medium:</span>
              <span class="${getDifficultyColor("medium").color} font-semibold">${data.mediumSolved || 0}</span>
            </div>
            
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded-full ${getDifficultyColor("hard").bg} ${getDifficultyColor("hard").ring} ring-1"></div>
              <span class="text-gray-400">Hard:</span>
              <span class="${getDifficultyColor("hard").color} font-semibold">${data.hardSolved || 0}</span>
            </div>
          </div>
          
          <div class="flex items-center gap-4 flex-wrap text-sm">
            ${
              data.acceptanceRate
                ? `
              <div class="flex items-center gap-2">
                <span class="text-gray-400">üìä Acceptance:</span>
                <span class="text-blue-400 font-semibold">${data.acceptanceRate}%</span>
              </div>
            `
                : ""
            }
            
            ${
              data.ranking
                ? `
              <div class="flex items-center gap-2">
                <span class="text-gray-400">üèÜ Ranking:</span>
                <span class="text-purple-400 font-semibold">#${data.ranking.toLocaleString()}</span>
              </div>
            `
                : ""
            }
            
            <div class="flex items-center gap-2">
              <span class="text-gray-400">üë§ Handle:</span>
              <a href="https://leetcode.com/${LEETCODE_USERNAME}" 
                 target="_blank" 
                 class="text-orange-400 hover:text-orange-300 font-semibold underline decoration-orange-400/30 hover:decoration-orange-300/50 transition-colors">
                ${LEETCODE_USERNAME}
              </a>
            </div>
          </div>
        </div>
      `;
    } catch (error) {
      console.error("Error displaying LeetCode stats:", error);
      statsContainer.innerHTML = `
        <div class="text-red-400 text-sm">
          ‚ùå LeetCode API is not working
        </div>
      `;
    }
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", displayLeetCodeStats);
  } else {
    displayLeetCodeStats();
  }
</script>
