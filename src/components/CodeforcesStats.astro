---
// Codeforces Rating Component
// This component fetches user data from Codeforces API and displays rating info
---

<div id="codeforces-stats" class="flex flex-col gap-4">
  <div class="animate-pulse">
    <div class="h-4 bg-gray-700 rounded w-3/4 mb-2"></div>
    <div class="h-3 bg-gray-600 rounded w-1/2"></div>
  </div>
</div>

<script>
  // Codeforces API configuration
  const CODEFORCES_API_BASE = 'https://codeforces.com/api';
  const CODEFORCES_HANDLE = 'ks-iitjmu';
  
  // Rating color mapping based on Codeforces rating system
  const getRatingColor = (rating: number) => {
    if (rating >= 3000) return { color: 'text-red-500', bg: 'bg-red-500/10', ring: 'ring-red-400/30', name: 'Legendary Grandmaster' };
    if (rating >= 2600) return { color: 'text-red-400', bg: 'bg-red-400/10', ring: 'ring-red-300/30', name: 'International Grandmaster' };
    if (rating >= 2400) return { color: 'text-red-300', bg: 'bg-red-300/10', ring: 'ring-red-200/30', name: 'Grandmaster' };
    if (rating >= 2300) return { color: 'text-orange-400', bg: 'bg-orange-400/10', ring: 'ring-orange-300/30', name: 'International Master' };
    if (rating >= 2100) return { color: 'text-orange-300', bg: 'bg-orange-300/10', ring: 'ring-orange-200/30', name: 'Master' };
    if (rating >= 1900) return { color: 'text-violet-400', bg: 'bg-violet-400/10', ring: 'ring-violet-300/30', name: 'Candidate Master' };
    if (rating >= 1600) return { color: 'text-blue-400', bg: 'bg-blue-400/10', ring: 'ring-blue-300/30', name: 'Expert' };
    if (rating >= 1400) return { color: 'text-cyan-400', bg: 'bg-cyan-400/10', ring: 'ring-cyan-300/30', name: 'Specialist' };
    if (rating >= 1200) return { color: 'text-green-400', bg: 'bg-green-400/10', ring: 'ring-green-300/30', name: 'Pupil' };
    return { color: 'text-gray-400', bg: 'bg-gray-400/10', ring: 'ring-gray-300/30', name: 'Newbie' };
  };

  // Fetch Codeforces user info
  async function fetchCodeforcesData() {
    try {
      const response = await fetch(`${CODEFORCES_API_BASE}/user.info?handles=${CODEFORCES_HANDLE}`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.status !== 'OK' || !data.result || data.result.length === 0) {
        throw new Error('Invalid API response');
      }
      
      return data.result[0];
    } catch (error) {
      console.error('Error fetching Codeforces data:', error);
      return null;
    }
  }

  // Fetch user's contest history for additional stats
  async function fetchContestStats() {
    try {
      const response = await fetch(`${CODEFORCES_API_BASE}/user.rating?handle=${CODEFORCES_HANDLE}`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.status !== 'OK') {
        throw new Error('Invalid API response');
      }
      
      return data.result;
    } catch (error) {
      console.error('Error fetching contest stats:', error);
      return [];
    }
  }

  // Display Codeforces stats
  async function displayCodeforcesStats() {
    const statsContainer = document.getElementById('codeforces-stats');
    if (!statsContainer) return;

    try {
      // Fetch user data and contest history in parallel
      const [userData, contestHistory] = await Promise.all([
        fetchCodeforcesData(),
        fetchContestStats()
      ]);

      if (!userData) {
        statsContainer.innerHTML = `
          <div class="text-red-400 text-sm">
            ‚ö†Ô∏è Unable to fetch Codeforces data. Please check your connection.
          </div>
        `;
        return;
      }

      const rating = userData.rating || 0;
      const maxRating = userData.maxRating || rating;
      const ratingInfo = getRatingColor(rating);
      const maxRatingInfo = getRatingColor(maxRating);
      
      // Calculate contest participation
      const contestCount = contestHistory.length;
      const bestRank = contestHistory.length > 0 ? Math.min(...contestHistory.map(c => c.rank)) : null;

      statsContainer.innerHTML = `
        <div class="space-y-3">
          <div class="flex items-center gap-4 flex-wrap">
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded-full ${ratingInfo.bg} ${ratingInfo.ring} ring-1"></div>
              <span class="text-white font-semibold">Current Rating:</span>
              <span class="${ratingInfo.color} font-bold text-lg">${rating}</span>
              <span class="text-xs ${ratingInfo.color} opacity-75">(${ratingInfo.name})</span>
            </div>
          </div>
          
          ${maxRating !== rating ? `
            <div class="flex items-center gap-4 flex-wrap">
              <div class="flex items-center gap-2">
                <div class="w-3 h-3 rounded-full ${maxRatingInfo.bg} ${maxRatingInfo.ring} ring-1"></div>
                <span class="text-white font-semibold">Max Rating:</span>
                <span class="${maxRatingInfo.color} font-bold text-lg">${maxRating}</span>
                <span class="text-xs ${maxRatingInfo.color} opacity-75">(${maxRatingInfo.name})</span>
              </div>
            </div>
          ` : ''}
          
          <div class="flex items-center gap-6 flex-wrap text-sm">
            <div class="flex items-center gap-2">
              <span class="text-gray-400">üèÜ Contests:</span>
              <span class="text-blue-400 font-semibold">${contestCount}</span>
            </div>
            
            ${bestRank ? `
              <div class="flex items-center gap-2">
                <span class="text-gray-400">ü•á Best Rank:</span>
                <span class="text-yellow-400 font-semibold">#${bestRank}</span>
              </div>
            ` : ''}
            
            <div class="flex items-center gap-2">
              <span class="text-gray-400">üë§ Handle:</span>
              <a href="https://codeforces.com/profile/${CODEFORCES_HANDLE}" 
                 target="_blank" 
                 class="text-blue-400 hover:text-blue-300 font-semibold underline decoration-blue-400/30 hover:decoration-blue-300/50 transition-colors">
                ${userData.handle}
              </a>
            </div>
          </div>
          
          ${userData.organization ? `
            <div class="flex items-center gap-2 text-sm">
              <span class="text-gray-400">üè´ Organization:</span>
              <span class="text-green-400">${userData.organization}</span>
            </div>
          ` : ''}
        </div>
      `;
    } catch (error) {
      console.error('Error displaying Codeforces stats:', error);
      statsContainer.innerHTML = `
        <div class="text-red-400 text-sm">
          ‚ùå Failed to load Codeforces data
        </div>
      `;
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', displayCodeforcesStats);
</script>