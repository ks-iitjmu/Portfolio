---
---

<style>
.loader-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: #000;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}
.loader-img {
  width: 120px;
  height: 120px;
  object-fit: contain;
  margin-bottom: 2rem;
}

.loader-name {
  font-family: 'Poppins', sans-serif;
  font-weight: 600;
  font-size: 2rem;
  margin-top: 1.2rem;
  margin-bottom: 0.5rem;
  background: linear-gradient(90deg, #ffffff, #cccccc, #888888, #ffffff);
  background-size: 300% 100%;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  color: transparent;
  animation: colorLine 1.2s linear infinite;
  letter-spacing: 1px;
}

@keyframes textGradient {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

.loader-line {
  width: 120px;
  height: 6px;
  border-radius: 3px;
  background: rgba(255, 255, 255, 0.1);
  position: relative;
  overflow: hidden;
  margin-top: 1.5rem;
}

.loader-line::before {
  content: '';
  position: absolute;
  top: 0;
  left: -50%;
  height: 100%;
  width: 50%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), #ffffff, rgba(255, 255, 255, 0.8), transparent);
  border-radius: 3px;
  animation: appleLoading 2.5s ease-in-out infinite;
  box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
}

@keyframes appleLoading {
  0% {
    left: -50%;
  }
  100% {
    left: 120%;
  }
}

@keyframes colorLine {
  0% {
    background-position: 0% 50%;
  }
  100% {
    background-position: 100% 50%;
  }
}
</style>

<div class="loader-overlay" id="loader">
  <img src="/lion.png" alt="Loading..." class="loader-img" />
  <div class="loader-name">Kunal Sharma</div>
  <div class="loader-line"></div>
</div>

<script>
  // Track when the page starts loading
  const loadStartTime = performance.now();
  const minimumLoadTime = 3000; // 3 seconds minimum
  
  let pageLoaded = false;
  let loaderHidden = false;
  
  // Function to hide the loader
  function hideLoader() {
    if (loaderHidden) return;
    loaderHidden = true;
    
    const loader = document.getElementById('loader');
    if (loader) {
      loader.style.opacity = '0';
      loader.style.transition = 'opacity 0.5s ease-out';
      
      setTimeout(() => {
        loader.style.display = 'none';
      }, 500);
    }
  }
  
  // Function to check if we should hide the loader
  function checkLoaderStatus() {
    const currentTime = performance.now();
    const elapsedTime = currentTime - loadStartTime;
    
    if (pageLoaded) {
      // Page is loaded, check if minimum time has passed
      if (elapsedTime >= minimumLoadTime) {
        // Both conditions met: page loaded and minimum time passed
        hideLoader();
      } else {
        // Page loaded but minimum time not reached, wait for remaining time
        const remainingTime = minimumLoadTime - elapsedTime;
        setTimeout(hideLoader, remainingTime);
      }
    }
    // If page is not loaded yet, we wait (no action needed)
  }
  
  // Listen for page load completion
  if (document.readyState === 'complete') {
    // Page already loaded
    pageLoaded = true;
    checkLoaderStatus();
  } else {
    // Wait for page to load
    window.addEventListener('load', () => {
      pageLoaded = true;
      checkLoaderStatus();
    });
  }
  
  // Fallback: Hide loader after maximum time (prevent infinite loading)
  setTimeout(() => {
    if (!loaderHidden) {
      console.warn('Loader timeout: hiding after maximum wait time');
      hideLoader();
    }
  }, 15000); // 15 seconds maximum
</script>
